wrapper {
    gradleVersion = '7.6.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'c'

group = pGroup
version = pVersion

repositories {
    maven {
        url 'https://mvn.topobyte.de'
    }
    mavenCentral()
}

dependencies {
    implementation 'de.topobyte:adt-misc:0.0.2'
}

task copyJars(type: Copy) {
    into "$buildDir/lib-run"
    from jar
}

task copyDeps(type: Copy) {
    into "$buildDir/lib-run"
    from configurations.runtimeClasspath
}

task createRuntime(dependsOn: [copyJars, copyDeps]) {
    description 'Setup the execution environment for the main scripts'
}

model {
    components {
        terminal(NativeLibrarySpec) {
            binaries.all {
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args "-I${org.gradle.internal.jvm.Jvm.current().javaHome}/include/win32"
                    linker.args "Shlwapi.lib", "Advapi32.lib"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/freebsd"
                }
            }
        }
    }
}

eclipse.classpath.file {
    withXml { xml ->
        def node = xml.asNode()
        def container = node.find { it.@path == 'src/main/java' }
        def attributes = container.find { it.@name == 'attributes' }
        container.attributes[0].appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:"$project.name/build/libs/terminal/shared"])
    }
}
